{"version":3,"sources":["./src/app/public/register/register.page.html","./src/app/public/register/register.module.ts","./src/app/public/register/register.page.scss","./src/app/public/register/register.page.ts","./src/app/public/validators/password.validator.ts"],"names":[],"mappings":"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","file":"public-register-register-module-es2015.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar>\\n        <ion-buttons slot = \\\"start\\\">\\n                <ion-button (click) = \\\"backToLogin()\\\">\\n                  <ion-icon slot =\\\"icon-only\\\" name =\\\"log-out\\\">\\n                  </ion-icon>\\n                </ion-button>\\n        </ion-buttons>\\n    <ion-title>Register</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n\\n\\n<ion-content padding class=\\\"form-content\\\">\\n    <form [formGroup] = \\\"myform\\\">\\n        <ion-item>\\n            <ion-label position=\\\"floating\\\" color=\\\"success\\\">Name:</ion-label>\\n            <ion-input formControlName=\\\"name\\\" type=\\\"text\\\"></ion-input>\\n        </ion-item>\\n        \\n        <ion-item>\\n            <ion-label position=\\\"floating\\\" color=\\\"success\\\">Email:</ion-label>\\n            <ion-input formControlName=\\\"email\\\" type=\\\"text\\\" ></ion-input>           \\n        </ion-item>\\n        <div class=\\\"error-messages\\\">\\n          <ng-container *ngFor=\\\"let error of error_messages.email\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"myform.get('email').hasError(error.type) && (myform.get('email').dirty || myform.get('email').touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ error.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n        <div formGroupName=\\\"matching_passwords\\\">\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" color=\\\"success\\\">Password</ion-label>\\n            <ion-input type=\\\"password\\\" formControlName=\\\"password\\\" [(ngModel)]='passread'></ion-input>\\n          </ion-item>\\n          <div class=\\\"error-messages\\\">\\n            <ng-container *ngFor=\\\"let error of error_messages.password\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"myform.get('matching_passwords').get('password').hasError(error.type) && (myform.get('matching_passwords').get('password').dirty || myform.get('matching_passwords').get('password').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ error.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n    \\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" color=\\\"success\\\">Confirm Password</ion-label>\\n            <ion-input type=\\\"password\\\" formControlName=\\\"repassword\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"error-messages\\\">\\n            <ng-container *ngFor=\\\"let error of error_messages.repassword\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"myform.get('matching_passwords').get('repassword').hasError(error.type) && (myform.get('matching_passwords').get('repassword').dirty || myform.get('matching_passwords').get('repassword').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ error.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n        </div>\\n        <!-- These validations are for the form group -->\\n        <div class=\\\"error-messages\\\">\\n          <ng-container *ngFor=\\\"let error of error_messages.matching_passwords\\\">\\n            <div class=\\\"error-message\\\" *ngIf=\\\"myform.get('matching_passwords').hasError(error.type) && (myform.get('matching_passwords').get('repassword').dirty || myform.get('matching_passwords').get('repassword').touched)\\\">\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ error.message }}\\n            </div>\\n          </ng-container>\\n        </div>\\n\\n       \\n       <ion-button [disabled]=\\\"!myform.valid\\\" (click) = \\\"signup()\\\" expand = \\\"block\\\" color=\\\"success\\\">Sign up</ion-button>\\n\\n    </form>\\n\\n\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { RegisterPage } from './register.page';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ReactiveFormsModule ,\n    \n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","module.exports = \".error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px;\\n}\\n\\nion-content {\\n  --background: url('crop.jpg') no-repeat 100% 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcHVibGljL3JlZ2lzdGVyL0M6XFxVc2Vyc1xcYW5hcyB6aXFcXERlc2t0b3BcXFRlYW1Xb3JrLW1hc3Rlci9zcmNcXGFwcFxccHVibGljXFxyZWdpc3RlclxccmVnaXN0ZXIucGFnZS5zY3NzIiwic3JjL2FwcC9wdWJsaWMvcmVnaXN0ZXIvcmVnaXN0ZXIucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBRUksVUFBQTtFQUNBLGVBQUE7RUFDQSxpQkFBQTtFQUNBLGdCQUFBO0FDQUo7O0FER0E7RUFDSSxpREFBQTtBQ0FKIiwiZmlsZSI6InNyYy9hcHAvcHVibGljL3JlZ2lzdGVyL3JlZ2lzdGVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5lcnJvci1tZXNzYWdlXG57XG4gICAgY29sb3I6IHJlZDtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gICAgbWFyZ2luLXRvcDogMTBweDtcbn1cblxuaW9uLWNvbnRlbnQge1xuICAgIC0tYmFja2dyb3VuZDogdXJsKCcuLi8uLi8uLi9hc3NldHMvaWNvbi9jcm9wLmpwZycpIG5vLXJlcGVhdCAxMDAlIDEwMCU7XG59XG4iLCIuZXJyb3ItbWVzc2FnZSB7XG4gIGNvbG9yOiByZWQ7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG59XG5cbmlvbi1jb250ZW50IHtcbiAgLS1iYWNrZ3JvdW5kOiB1cmwoXCIuLi8uLi8uLi9hc3NldHMvaWNvbi9jcm9wLmpwZ1wiKSBuby1yZXBlYXQgMTAwJSAxMDAlO1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Validators, FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { PasswordValidator } from '../validators/password.validator';\nimport {User} from '../../models/User';\nimport { AngularFireDatabase , AngularFireList } from '@angular/fire/database';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport { ToastController } from '@ionic/angular';\nimport {EmailComposer} from '@ionic-native/email-composer/ngx';\n\n\n \n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n\n  myform: FormGroup;\n  matching_passwords_group: FormGroup; \n  passread;\n \n  usersList  : AngularFireList<any>;\n\n  constructor(private router: Router, private fb: FormBuilder,private emailComposer:EmailComposer,\n     private db : AngularFireDatabase , private fireauth :AngularFireAuth,public toastController: ToastController) {\n     this.usersList = db.list<User>('/User/');\n   }\n\n  ngOnInit() {\n    \n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])),\n      repassword: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n\n\n\n    this.myform = this.fb.group({\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      name: new FormControl (''),\n      matching_passwords: this.matching_passwords_group\n    });\n\n   \n  }\n\n  error_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Please wnter a valid email.'}\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 6 characters long.' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number.' }\n    ],\n    'Repassword': [\n      { type: 'required', message: 'Confirm password is required.' }\n    ],\n    'matching_passwords': [\n      { type: 'areEqual', message: 'Password mismatch.' }\n    ],\n  }\n  \n\n  backToLogin(){\n\n    this.router.navigate(['login']);\n  }\n\n  signup(){\n \n\n    let emal ={\n      to : this.myform.value.email,\n      cc :[],\n      bcc : [],\n      attachment:[],\n      sublect :  \"Validation Email\",\n      body : \" 12345 \",\n      isHtml : false,\n      app : \"Gmail\"\n\n    }\n    this.emailComposer.open(emal);\n    console.log(\"yes\");\n    // this.usersList.push({\n    //        key_id: new Date().getTime(),\n    //         name : this.myform.value.name,\n    //         email : this.myform.value.email,\n    //         password: this.passread,\n            \n    // } ).then(newUser => {console.log(\"seucess\");}\n    // ,error=>{console.log(\"error\")}\n    // );\n\n    // this.fireauth.auth.createUserWithEmailAndPassword(this.myform.value.email, this.passread)\n    //   .then(res => {\n    //     if (res.user) {\n    //       console.log(res.user);\n    //       //this.router.navigate(['members','dashboard']);\n          \n    //     }\n    //   })\n    //   .catch(err => {\n    //     console.log('signup failed ${err}');\n    //     console.log(err.message);\n    //     this.presentToast(err.message);\n    //   });\n  }\n  async presentToast(m) {\n    const toast = await this.toastController.create({\n      message: m,\n      duration: 5000\n    });\n    toast.present();\n  }\n\n  \n}\n","import { FormControl, FormGroup } from '@angular/forms';\n\nexport class PasswordValidator {\n\n  // Inspired on: http://plnkr.co/edit/Zcbg2T3tOxYmhxs7vaAm?p=preview\n  static areEqual(formGroup: FormGroup) {\n    let val;\n    let valid = true;\n\n    for (let key in formGroup.controls) {\n      if (formGroup.controls.hasOwnProperty(key)) {\n        let control: FormControl = <FormControl>formGroup.controls[key];\n\n        if (val === undefined) {\n          val = control.value\n        } else {\n          if (val !== control.value) {\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n\n    if (valid) {\n      return null;\n    }\n\n    return {\n      areEqual: true\n    };\n  }\n}\n"],"sourceRoot":""}